~main body start~
~helper import sensitivity/reflection/helpers/ReflectionHelper~

~imports start~
using System.Reflection;
using HelperReflection;
~imports end~

~template simple_reflection_positive start~
try {
    var type = typeof(ReflectionHelper);
    var rh = (ReflectionHelper)type.GetConstructors()[0].Invoke(new object[] { ~[VAR_string@1]~ });
    type.GetFields()[0].SetValue(rh, ~[VAR_string@1]~);
    ~[VAR_string@1]~ = rh.getValue();
} catch (Exception e) {
    throw;
}
~template end~

~template simple_reflection_negative start~
try {
    var type = typeof(ReflectionHelper);
    var rh = (ReflectionHelper)type.GetConstructors()[0].Invoke(new object[] { ~[VAR_string@1]~ });
    type.GetFields()[0].SetValue(rh, ~[CONST_string]~);
    ~[VAR_string@1]~ = rh.getValue();
} catch (Exception e) {
    throw;
}
~template end~

~main body end~
